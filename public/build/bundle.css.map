{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../SvelteTooltip.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { scaleLinear, scaleBand, scaleTime } from \"d3-scale\";\n  import { data } from \"./data.js\";\n  import {\n    Graphic,\n    Section,\n    PointLayer,\n    RectangleLayer,\n    Line,\n    XAxis,\n    YAxis\n  } from \"@snlab/florence\";\n\n  import SvelteTooltip from 'svelte-tooltip';\n  // import { BarChart }  from 'd3node-barchart';\n  import DataContainer from \"@snlab/florence-datacontainer\";\n\n  let chartData = data;\n\n  let sales = new DataContainer(chartData);\n\n  // overall settings\n  const padding = { left: 90, bottom: 30, top: 0, right: 10 };\n  const color = \"rgb(93, 134, 156)\";\n  const color1 = \"rgb(187, 46, 46)\";\n  console.log(\"aaaaaaaaaaaaaaaaaa\",sales)\n  // data for facet 1\n  let salesPerType = sales\n    .groupBy(\"flat_type\")\n    .summarise({ total_count: { resale_price: \"count\" } });\n  // data for facet 2\n  let salesDistribution = sales\n    .bin({ groupBy: \"resale_price\", method: \"EqualInterval\", numClasses: 20 })\n    .summarise({ total_count: { resale_price: \"count\" } });\n  // data for facet 4\n  let salesOverTime = sales\n    .groupBy(\"month\")\n    .summarise({ mean_price: { resale_price: \"mean\" } })\n    .arrange({ month: \"ascending\" }) // sort by month (otherwise line will criss-cross)\n    .mutate({ month_as_date: row => new Date(row.month) }); // convert to proper date so we can use date scale\n\n\n  //data for facet 6\n\n  let salesplot = sales\n    .groupBy(\"storey_range\")\n    .summarise({ total_count: { resale_price: \"count\" } });\n  \n   // data for facet 7\n  let salesOverFloaType = sales\n    // .bin({ groupBy: \"flat_type\", numClasses: 20 })\n    .groupBy(\"flat_type\")\n    .summarise({ mean_price: { resale_price: \"mean\" } });\n\n  console.log(salesOverFloaType);\n  // data for facet 8\n  let salesflat_model = sales\n    .groupBy(\"flat_model\")\n    .summarise({ total_count: { resale_price: \"count\" } });\n\n  let towns = [];\n  for (let i = 0; i < data.length; i++) {\n    let element = data[i];\n    let f = false;\n    for(let j = 0; j< towns.length ; j++){\n      if(towns[j] == element.town)\n        {\n          // console.log(\"town name\",towns[j]);\n          f = true;\n          break;\n        }\n    }\n    if (!f) {\n      towns.push(element.town);\n    }\n  }\n\n  function selTownWithName(townName) {\n    let Towndata = [];\n    if(townName == 'ALL TOWN'){\n      Towndata = data;\n      return Towndata;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      let element = data[i];\n      if (element.town == townName) {\n        Towndata.push(element);\n      }\n    }\n   \n    return Towndata; \n  }\n\n  \n  function selTown(e) {\n\n    let TownchartData = selTownWithName(e.target.value);\n    sales = new DataContainer(TownchartData);\n        \n  // data for facet 1\n  salesPerType = sales\n    .groupBy(\"flat_type\")\n    .summarise({ total_count: { resale_price: \"count\" } });\n  // data for facet 8\n  salesflat_model = sales\n    .groupBy(\"flat_model\")\n    .summarise({ total_count: { resale_price: \"count\" } });\n  // data for facet 2\n   salesDistribution = sales\n    .bin({ groupBy: \"resale_price\", method: \"EqualInterval\", numClasses: 20 })\n    .summarise({ total_count: { resale_price: \"count\" } });\n\n  // data for facet 4\n   salesOverTime = sales\n    .groupBy(\"month\")\n    .summarise({ mean_price: { resale_price: \"mean\" } })\n    .arrange({ month: \"ascending\" }) // sort by month (otherwise line will criss-cross)\n    .mutate({ month_as_date: row => new Date(row.month) }); // convert to proper date so we can use date scale\n\n  //data for facet\n  salesplot = sales\n    .groupBy(\"storey_range\")\n    .summarise({ total_count: { resale_price: \"count\" } });\n  \n  // data for facet 7\n  salesOverFloaType = sales\n    // .bin({ groupBy: \"flat_type\", numClasses: 20 })\n    .groupBy(\"flat_type\")\n    .summarise({ mean_price: { resale_price: \"mean\" } });\n\n\n  console.log(salesOverTime);\n  // data for facet 7\n  \n  }\n\n\n  // show info data\n  let showinfo = 0;\n  function ShowData(e){\n    showinfo =Math.round( salesOverFloaType._data.mean_price[e.key]);\n  }\n</script>\n\n<style>\n  .header{\n    border-bottom: 1px #080808 solid;\n    padding: 2px;\n  }\n  .choose-select label{\n    font-size: 20px;\n  }\n  .main-chart {\n    padding: 20px;\n  }\n  .header-title{\n    text-align: center;\n    /* margin-top: -70px; */\n  }\n  .graph-chart{\n    display: inline-block;\n  }\n  .graph-chart > p{\n    padding-left: 35px;\n    padding-bottom: 15px;\n  }\n  \n</style>\n\n<div class=\"graph\">\n  <div class=\"header\">\n    \n    <div class = \"header-title\">\n      <h1>HDB Resale Flat Prices Data</h1>\n      <label>This website presents data on HDB resale flat prices from January 2017</label>\n    </div>\n    <div class=\"choose-select\">\n      <label>Choose a town :</label>\n      <select on:change={e => { selTown(e); }}>\n      <option>ALL TOWN</option>\n        {#if towns.length === 0}\n          <option>No towns</option>\n        {:else}\n          {#each towns as town}\n            <option value={town}>{town}</option>\n          {/each}\n        {/if}\n      </select>\n    </div>\n  </div>\n\n  <div class=\"main-chart\">\n    <!-- main chart -->\n    <!-- 1 -->\n    <div class=\"graph-chart\">\n      <p> 1.Count of Units by Flat Type </p>\n      <Graphic width={425} height={425}>\n        <!-- 1 -->\n\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleLinear().domain([\n            0,\n            salesPerType.domain('total_count')[1]\n          ])}\n          scaleY={scaleBand()\n            .domain(salesPerType.domain('flat_type'))\n            .padding(0.5)}>\n          <RectangleLayer\n            x1={0}\n            x2={salesPerType.column('total_count')}\n            y1={salesPerType.column('flat_type')}\n            y2={({ scaleY }) => salesPerType.map('flat_type', ft => scaleY(ft) + scaleY.bandwidth())}\n            fill={color} />\n          <XAxis labelFontSize={8} title=\"Count\" />\n          <YAxis labelFontSize={8} title=\"Flat Type\" />\n        </Section>\n      </Graphic>\n    </div>\n    <!-- 2 -->\n    <div class=\"graph-chart\">\n      <p> 2.Count of Units by Resale Price </p>\n      <Graphic width={425} height={425}>\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleLinear().domain(salesDistribution.domain('bins'))}\n          scaleY={scaleLinear().domain([\n            0,\n            salesDistribution.domain('total_count')[1]\n          ])}>\n          <RectangleLayer\n            x1={salesDistribution.map('bins', bin => bin[0])}\n            x2={salesDistribution.map('bins', bin => bin[1])}\n            y1={0}\n            y2={salesDistribution.column('total_count')}\n            fill={color} />\n          <XAxis tickCount={5} labelFontSize={8} title=\"Resale Price\" />\n          <YAxis labelFontSize={8} title=\"Count\" />\n        </Section>\n      </Graphic>\n    </div>\n    <!-- 3 -->\n    <div class=\"graph-chart\">\n      <p> 3.Mean Resale Price Over Time </p>\n      <Graphic width={425} height={425}>\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleTime().domain(salesOverTime.domain('month_as_date'))}\n          scaleY={scaleLinear().domain(salesOverTime.domain('mean_price'))}>\n          <Line\n            x={salesOverTime.column('month_as_date')}\n            y={salesOverTime.column('mean_price')}\n            stroke={color}\n            strokeWidth={2} />\n          <XAxis tickCount={3} labelFontSize={8} title=\"Date\" />\n          <YAxis labelFontSize={8} title=\"Mean Resale Price\" />\n        </Section>\n      </Graphic>\n    </div>\n    <!-- 4 -->\n    <div class=\"graph-chart\">\n      <p> 4.Resale Price vs Floor Area(sqm)</p>\n      <Graphic width={400} height={425}>\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleLinear().domain(sales.domain('floor_area_sqm'))}\n          scaleY={scaleLinear().domain(sales.domain('resale_price'))}>\n          <PointLayer\n            x={sales.column('floor_area_sqm')}\n            y={sales.column('resale_price')}\n            fill={color}\n            opacity={0.5} />\n          <!-- <Scatter /> -->\n          <XAxis tickCount={6} labelFontSize={8} title=\"Floor Area (sqm)\" />\n          <YAxis labelFontSize={8} title=\"Resale Price\" />\n        </Section>\n      </Graphic>\n    </div>\n    <!-- 5 -->\n    <div class=\"graph-chart\">\n      <p> 5.Resale Price(Years) vs Remaining Lease</p>\n      <Graphic width={425} height={425}>\n        <!-- 5 -->\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleLinear().domain(sales.domain('resale_price'))}\n          scaleY={scaleLinear().domain(sales.domain('remaining_lease'))}>\n          <PointLayer\n            x={sales.column('resale_price')}\n            y={sales.column('remaining_lease')}\n            fill={color1}\n            opacity={0.5} />\n          <XAxis tickCount={6} labelFontSize={8} title=\"Resale price\" />\n          <YAxis labelFontSize={8} title=\"Remaining Lease\" />\n        </Section>\n      </Graphic>\n    </div>\n    <!-- 6 -->\n    <div class=\"graph-chart\">\n      <p> 6.Resale Price vs Storey Range</p>\n      <Graphic width={425} height={425}>\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleLinear().domain(sales.domain('resale_price'))}\n          scaleY={scaleBand()\n            .domain(salesplot.domain('storey_range'))\n            .padding(0.1)} \n          >\n          <PointLayer\n            x={sales.column('resale_price')}\n            y={sales.column('storey_range')}\n            fill={color1}\n            opacity={0.1} />\n          <XAxis tickCount={6} labelFontSize={8} title=\"Resale price\" />\n          <YAxis labelFontSize={8} title=\"Storey Range\" />\n        </Section>\n      </Graphic>\n    </div>\n    <!-- 7 -->\n    <div class=\"graph-chart\">\n      <p> 7.Mean Resale Price vs Flat Type</p>\n      <SvelteTooltip tip=\"Resale Price : {showinfo}\" top color=\"#EF6C00\">\n        <Graphic width={425} height={425}>\n          <!-- 7 -->\n\n          <Section\n            x1={0}\n            x2={400}\n            y1={0}\n            y2={400}\n            {padding}\n            flipY\n            scaleX={scaleBand()\n                .domain(salesOverFloaType.domain('flat_type'))\n                .padding(0.01)}\n            }\n            scaleY={scaleLinear().domain([\n              0,\n              salesOverFloaType.domain('mean_price')[1]\n            ])}>\n            <RectangleLayer\n              renderSettings = {showinfo}\n              onMouseover={(e)=> { ShowData(e) ;} }\n              \n              x1={salesOverFloaType.column('flat_type')}\n              x2={({ scaleX }) => salesOverFloaType.map('flat_type', ft => scaleX(ft) + scaleX.bandwidth())}\n              y1={0}\n              y2={salesOverFloaType.column('mean_price')}\n              \n              \n              fill={color1} />\n            <XAxis tickCount={5} labelFontSize={8} title=\"Flat Type\" />\n            <YAxis labelFontSize={8} title=\"Mean Resale Price\" />\n          </Section>\n        </Graphic>\n      </SvelteTooltip>\n    </div>\n    <!-- 8 -->\n    <div class=\"graph-chart\">\n      <p> 8.Count of Units by Flat Model</p>\n      <Graphic width={425} height={425}>\n        <Section\n          x1={0}\n          x2={400}\n          y1={0}\n          y2={400}\n          {padding}\n          flipY\n          scaleX={scaleLinear().domain([\n            0,\n            salesflat_model.domain('total_count')[1]\n          ])}\n          scaleY={scaleBand()\n            .domain(salesflat_model.domain('flat_model'))\n            .padding(0.5)} >\n          <RectangleLayer\n            x1={0}\n            x2={salesflat_model.column('total_count')}\n            y1={salesflat_model.column('flat_model')}\n            y2={({ scaleY }) => salesflat_model.map('flat_model', ft => scaleY(ft) + scaleY.bandwidth())}\n            fill={color1}\n            \n            />\n          <!-- <BarChart /> -->\n\n          <XAxis labelFontSize={8} title=\"Count\" />\n          <YAxis labelFontSize={8} title=\"Flat Model\" />\n        </Section>\n\n      </Graphic>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  export let tip = '';\n  export let top = false;\n  export let right = false;\n  export let bottom = false;\n  export let left = false;\n  export let active = false;\n  export let color = '#757575';\n\n  let style = `background-color: ${color};`\n\n</script>\n\n<style>\n.tooltip-wrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.tooltip {\n  position: absolute;\n  font-family: inherit;\n  white-space: nowrap;\n  color: inherit;\n  padding: 8px 16px;\n  border-radius: 6px;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 150ms, visibility 150ms;\n}\n\n.tooltip.top {\n  left: 50%;\n  transform: translate(-50%, -100%);\n  margin-top: -8px;\n}\n\n.tooltip.bottom {\n  left: 50%;\n  bottom: 0;\n  transform: translate(-50%, 100%);\n  margin-bottom: -8px;\n}\n\n.tooltip.left {\n  left: 0;\n  transform: translateX(-100%);\n  margin-left: -8px;\n}\n\n.tooltip.right {\n  right: 0;\n  transform: translateX(100%);\n  margin-right: -8px;\n}\n\n.tooltip.active {\n  opacity: 1;\n  visibility: initial;\n}\n\n.tooltip-slot:hover + .tooltip {\n  opacity: 1;\n  visibility: initial;\n}\n\n</style>\n\n<div class=\"tooltip-wrapper\">\n  <span class=\"tooltip-slot\">\n    <slot/>\n  </span>\n  <span\n    class=\"tooltip\" \n    class:active\n    class:left\n    class:right\n    class:bottom\n    class:top\n    style={style}\n  >\n    {tip}\n  </span>\n</div>"
  ],
  "names": [],
  "mappings": "AAkJE,mCAAO,CAAC,AACN,aAAa,CAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAChC,OAAO,CAAE,GAAG,AACd,CAAC,AACD,4BAAc,CAAC,mBAAK,CAAC,AACnB,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,WAAW,4BAAC,CAAC,AACX,OAAO,CAAE,IAAI,AACf,CAAC,AACD,yCAAa,CAAC,AACZ,UAAU,CAAE,MAAM,AAEpB,CAAC,AACD,wCAAY,CAAC,AACX,OAAO,CAAE,YAAY,AACvB,CAAC,AACD,0BAAY,CAAG,eAAC,CAAC,AACf,YAAY,CAAE,IAAI,CAClB,cAAc,CAAE,IAAI,AACtB,CAAC;ACxJH,gBAAgB,eAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,OAAO,CACpB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,OAAO,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,KAAK,AAC7C,CAAC,AAED,QAAQ,IAAI,eAAC,CAAC,AACZ,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,CACjC,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,QAAQ,OAAO,eAAC,CAAC,AACf,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,QAAQ,KAAK,eAAC,CAAC,AACb,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,WAAW,KAAK,CAAC,CAC5B,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,QAAQ,MAAM,eAAC,CAAC,AACd,KAAK,CAAE,CAAC,CACR,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,QAAQ,OAAO,eAAC,CAAC,AACf,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,aAAa,MAAM,CAAG,QAAQ,eAAC,CAAC,AAC9B,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,AACrB,CAAC"
}